"""State of conversation between Agent and User."""

import operator
from dataclasses import Field
from typing import Annotated, TypedDict

from langgraph.graph.message import add_messages
from pydantic import BaseModel, Field


class PlanningState(TypedDict):
    """State of conversation between Agent and User."""

    project_description: Annotated[str, "Description of the project by User"]
    messages: Annotated[
        list[str], add_messages
    ]  # Clarifying questions to refine the project idea by project info colleciton agent
    project_research: Annotated[
        str, "Research information generated by research agent"
    ]  #
    project_plan: Annotated[list[str], operator.add]  # generated by planning Agent/s
    final_report: Annotated[str, "Generated by Report Generation Agent"]


class SearchQuery(BaseModel):
    """Agent will use this to search for information."""

    query: str = Field(..., description="The query to search for")


class ResearchState(BaseModel):
    """The state of the research agent."""

    result: Annotated[str, "collect final results after research from the Agent"]
