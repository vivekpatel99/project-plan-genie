"""State of conversation between Agent and User."""

from typing import Annotated

from langchain_core.messages import MessageLikeRepresentation
from langgraph.graph import MessagesState
from langgraph.graph.message import add_messages
from pydantic import BaseModel, Field

# class PlanningState(TypedDict):
#     """State of conversation between Agent and User."""

#     project_description: Annotated[str, "Description of the project by User"]
#     messages: Annotated[
#         list[str], add_messages
#     ]  # Clarifying questions to refine the project idea by project info colleciton agent
#     project_research: Annotated[
#         str, "Research information generated by research agent"
#     ]  #
#     project_plan: Annotated[list[str], operator.add]  # generated by planning Agent/s
#     final_report: Annotated[str, "Generated by Report Generation Agent"]


# class SearchQuery(BaseModel):
#     """Agent will use this to search for information."""

#     query: str = Field(..., description="The query to search for")


# class ResearchState(BaseModel):
#     """The state of the research agent."""

#     result: Annotated[str, "collect final results after research from the Agent"]


class AgentInputState(MessagesState):
    """Input state is only messages."""

    pass


class AgentState(MessagesState):
    """Agents States."""

    supervisor_message: Annotated[list[MessageLikeRepresentation], add_messages]
    research_brief: str | None
    raw_notes: Annotated[list[str], add_messages] = []
    notes: Annotated[list[str], add_messages] = []
    final_report: str


class ConductResearch(BaseModel):
    """Call this tool to conduct research on a specific topic."""

    research_topic: str = Field(
        description="Project idea with detailed description (as much as information possible) by User",
    )


class ResearchComplete(BaseModel):
    """Call this tool to indicate that the research is complete."""

    pass


class Summary(BaseModel):
    """contain summary and key excerpts."""

    Summary: str
    key_excerpts: str


class ClarifyWithUser(BaseModel):
    """Call this tool to ask a clarification questions/infomartion to the user."""

    need_clarification: bool = Field(
        description="Whether the user needs to be asked a clarification question.",
    )
    question: str = Field(
        description="The question to ask the user to clarify the report scope",
    )
    verification: str = Field(
        description="Verify message that we will start research after the user has provided the necessary information.",
    )


class ResearchQuestion(BaseModel):
    """Research questions to guide the research."""

    research_brief: str = Field(
        description="A research question that will be used to guide the research.",
    )
